@using FrontEndServer.Shared;
@using Microsoft.AspNetCore.SignalR.Client
@using FrontEndServer.Client.ChatBot_UI.Models.Messages;
@using FrontEndServer.Client.ChatBot_UI.Components;
@inject IJSRuntime JSRuntime

<div class="chat-window">
    <div class="message-container">
        @foreach (Message message in Messages)
        {
            <div style="background-color: @message._backgroundColor; color: @message._textColor; margin: 10px; padding: 10px;">
                @message.GetMessage()
            </div>
        }
    </div>

    <SendMessage OnSendMessage="HandleSendMessage" />
</div>

@code {
    private List<Message> Messages = new List<Message>();
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:7013/{ApiConstants.HubConstants.BaseUrl}")
            .Build();

        _hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            // Handle the message string here. For example:
            var messageFromAI = new MessageFromAI(message, "Server", DateTime.Now);
            OnReceiveMessage(messageFromAI);
        });

        await _hubConnection.StartAsync();
        if (_hubConnection.State == HubConnectionState.Connected)
        {
            Console.WriteLine("Connected to the hub.");
        }
        else
        {
            Console.WriteLine("Failed to connect to the hub.");
        }

    }

    private void OnReceiveMessage(MessageFromAI message)
    {
        Messages.Add(message);
        StateHasChanged(); // Request the component to re-render
    }

    private void HandleSendMessage(Message message)
    {
        Messages.Add(message);
    }

    // Clean up the connection when component is disposed
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
